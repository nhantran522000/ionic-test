name: QA Testing Builds

on:
  push:
    branches:
      - main
      - develop
      - qa
  pull_request:
    branches:
      - main
      - develop

env:
  BUILD_NUMBER: ${{ github.run_number }}
  COMMIT_SHA: ${{ github.sha }}

jobs:
  web-build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate version
        id: version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build web assets
        run: pnpm run build

      - name: Upload web build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build-v${{ steps.version.outputs.version }}
          path: www/
          retention-days: 30

  android-qa:
    runs-on: ubuntu-latest
    needs: web-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build-v${{ needs.web-build.outputs.version }}
          path: www/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Add Capacitor Android platform
        run: pnpm exec npx cap add android

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Sync Capacitor Android
        run: pnpm exec npx cap sync android

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/release.keystore

      - name: Build and Sign Android APK for QA
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/app/release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Rename APK with version
        run: |
          mkdir -p qa-builds/android
          cp android/app/build/outputs/apk/release/app-release.apk \
             qa-builds/android/TestApp-v${{ needs.web-build.outputs.version }}-Android.apk

      - name: Create Android install instructions
        run: |
          cat > qa-builds/android/INSTALL-ANDROID.md << 'EOF'
          # Android APK Installation Instructions
          
          ## For QA Testing - Version ${{ needs.web-build.outputs.version }}
          
          ### Prerequisites
          - Android device with "Unknown sources" enabled
          - Or Android emulator/simulator
          
          ### Installation Steps
          1. Download the APK file: `TestApp-v${{ needs.web-build.outputs.version }}-Android.apk`
          2. Transfer to your Android device (via email, USB, cloud storage, etc.)
          3. On your device, navigate to Settings > Security > Install unknown apps
          4. Enable installation from your file manager or browser
          5. Tap the APK file and install
          
          ### Build Information
          - **Version**: ${{ needs.web-build.outputs.version }}
          - **Build Number**: ${{ github.run_number }}
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Built**: $(date -u)
          
          ### Troubleshooting
          - If installation fails, ensure "Install unknown apps" is enabled
          - Clear any previous version before installing
          - Check device storage space
          EOF

      - name: Upload Android QA build
        uses: actions/upload-artifact@v4
        with:
          name: android-qa-v${{ needs.web-build.outputs.version }}
          path: qa-builds/android/
          retention-days: 30

  ios-qa:
    runs-on: macos-latest
    needs: web-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build-v${{ needs.web-build.outputs.version }}
          path: www/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Add Capacitor iOS platform
        run: pnpm exec npx cap add ios

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.0"

      - name: Install CocoaPods
        run: sudo gem install cocoapods

      - name: Sync Capacitor iOS
        run: pnpm exec npx cap sync ios

      - name: Install iOS dependencies
        run: |
          cd ios/App
          pod install

      - name: Build iOS app for simulator
        run: |
          cd ios
          xcodebuild -workspace App/App.xcworkspace \
            -scheme App \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            -derivedDataPath build \
            build

      - name: Create iOS QA package
        run: |
          mkdir -p qa-builds/ios
          cd ios
          
          # Find the built app for simulator
          APP_PATH=$(find build/Build/Products/Debug-iphonesimulator -name "*.app" -type d | head -1)
          if [ -n "$APP_PATH" ]; then
            # Create archive directory structure
            mkdir -p ios-archive/Products/Applications/
            # Copy the app
            cp -r "$APP_PATH" ios-archive/Products/Applications/
            # Create zip archive with version in name
            cd ios-archive
            zip -r "../../qa-builds/ios/TestApp-v${{ needs.web-build.outputs.version }}-iOS-Simulator.zip" *
            cd ..
          else
            echo "No .app file found"
            exit 1
          fi

      - name: Create iOS install instructions
        run: |
          cat > qa-builds/ios/INSTALL-IOS.md << 'EOF'
          # iOS Simulator Installation Instructions
          
          ## For QA Testing - Version ${{ needs.web-build.outputs.version }}
          
          ### Prerequisites
          - macOS computer
          - Xcode installed (available from Mac App Store)
          - iOS Simulator (comes with Xcode)
          
          ### Installation Steps
          1. Download the ZIP file: `TestApp-v${{ needs.web-build.outputs.version }}-iOS-Simulator.zip`
          2. Extract the ZIP file
          3. Open Terminal and navigate to the extracted folder
          4. Run: `xcrun simctl install booted Applications/*.app`
          5. Or drag the .app file to your iOS Simulator window
          
          ### Alternative Method (Drag & Drop)
          1. Open iOS Simulator (from Xcode > Open Developer Tool > Simulator)
          2. Extract the ZIP file and navigate to Products/Applications/
          3. Drag the .app file directly onto the simulator screen
          
          ### Build Information
          - **Version**: ${{ needs.web-build.outputs.version }}
          - **Build Number**: ${{ github.run_number }}
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Built**: $(date -u)
          - **Platform**: iOS Simulator (Debug build)
          
          ### Troubleshooting
          - Ensure iOS Simulator is running before installation
          - If app doesn't appear, try restarting the simulator
          - This build only works on iOS Simulator, not physical devices
          EOF

      - name: Upload iOS QA build
        uses: actions/upload-artifact@v4
        with:
          name: ios-qa-v${{ needs.web-build.outputs.version }}
          path: qa-builds/ios/
          retention-days: 30

  qa-summary:
    runs-on: ubuntu-latest
    needs: [web-build, android-qa, ios-qa]
    if: always()
    steps:
      - name: Create QA Build Summary
        run: |
          echo "# QA Build Summary - Version ${{ needs.web-build.outputs.version }}" > build-summary.md
          echo "" >> build-summary.md
          echo "## Build Information" >> build-summary.md
          echo "- **Version**: ${{ needs.web-build.outputs.version }}" >> build-summary.md
          echo "- **Build Number**: ${{ github.run_number }}" >> build-summary.md
          echo "- **Commit**: ${{ github.sha }}" >> build-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> build-summary.md
          echo "- **Triggered by**: ${{ github.actor }}" >> build-summary.md
          echo "- **Built**: $(date -u)" >> build-summary.md
          echo "" >> build-summary.md
          echo "## Available Downloads" >> build-summary.md
          echo "" >> build-summary.md
          
          if [ "${{ needs.android-qa.result }}" == "success" ]; then
            echo "✅ **Android APK**: TestApp-v${{ needs.web-build.outputs.version }}-Android.apk" >> build-summary.md
            echo "   - Ready for installation on Android devices" >> build-summary.md
            echo "   - Installation instructions included" >> build-summary.md
            echo "" >> build-summary.md
          else
            echo "❌ **Android APK**: Build failed" >> build-summary.md
            echo "" >> build-summary.md
          fi
          
          if [ "${{ needs.ios-qa.result }}" == "success" ]; then
            echo "✅ **iOS Simulator**: TestApp-v${{ needs.web-build.outputs.version }}-iOS-Simulator.zip" >> build-summary.md
            echo "   - Ready for iOS Simulator testing" >> build-summary.md
            echo "   - Installation instructions included" >> build-summary.md
            echo "" >> build-summary.md
          else
            echo "❌ **iOS Simulator**: Build failed" >> build-summary.md
            echo "" >> build-summary.md
          fi
          
          echo "## How to Download" >> build-summary.md
          echo "1. Go to the [Actions tab](../../actions) of this repository" >> build-summary.md
          echo "2. Click on the latest workflow run" >> build-summary.md
          echo "3. Scroll down to the 'Artifacts' section" >> build-summary.md
          echo "4. Download the desired build artifacts" >> build-summary.md
          echo "" >> build-summary.md
          echo "## Testing Notes" >> build-summary.md
          echo "- Each artifact includes installation instructions" >> build-summary.md
          echo "- Android APK can be installed on physical devices or emulators" >> build-summary.md
          echo "- iOS build is for Simulator only (requires macOS + Xcode)" >> build-summary.md
          echo "- Builds are retained for 30 days" >> build-summary.md

      - name: Upload QA summary
        uses: actions/upload-artifact@v4
        with:
          name: qa-build-summary-v${{ needs.web-build.outputs.version }}
          path: build-summary.md
          retention-days: 30
