name: Mobile Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build web assets
        run: pnpm run build

      - name: Upload web build
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: www/

  deploy-android:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: www/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Add Capacitor platforms
        run: |
          pnpm exec npx cap add android
          pnpm exec npx cap add ios

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Sync Capacitor Android
        run: pnpm exec npx cap sync android

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/release.keystore

      - name: Build and Sign Android APK
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/app/release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-signed
          path: android/app/build/outputs/apk/release/app-release.apk

  deploy-ios:
    runs-on: macos-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: www/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Add Capacitor platforms
        run: |
          pnpm exec npx cap add android
          pnpm exec npx cap add ios

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.0"

      - name: Install CocoaPods
        run: sudo gem install cocoapods

      - name: Sync Capacitor iOS
        run: pnpm exec npx cap sync ios

      - name: Install iOS dependencies
        run: |
          cd ios/App
          pod install

      - name: Build iOS app for simulator
        run: |
          cd ios
          xcodebuild -workspace App/App.xcworkspace \
            -scheme App \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            -derivedDataPath build \
            build

      - name: Create iOS app archive
        run: |
          cd ios
          # Find the built app for simulator
          APP_PATH=$(find build/Build/Products/Debug-iphonesimulator -name "*.app" -type d | head -1)
          if [ -n "$APP_PATH" ]; then
            # Create archive directory
            mkdir -p ios-archive/Products/Applications/
            # Copy the app
            cp -r "$APP_PATH" ios-archive/Products/Applications/
            # Create zip archive
            cd ios-archive
            zip -r ../ios-archive.zip *
            cd ..
          else
            echo "No .app file found"
            exit 1
          fi

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive
          path: ios/ios-archive.zip
